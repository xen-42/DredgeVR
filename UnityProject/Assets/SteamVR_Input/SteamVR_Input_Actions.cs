//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Valve.VR
{
    using System;
    using UnityEngine;
    
    
    public partial class SteamVR_Actions
    {
        
        private static SteamVR_Action_Skeleton p_default_SkeletonLeftHand;
        
        private static SteamVR_Action_Skeleton p_default_SkeletonRightHand;
        
        private static SteamVR_Action_Boolean p_default_LeftGrab;
        
        private static SteamVR_Action_Boolean p_default_RightGrab;
        
        private static SteamVR_Action_Boolean p_default_LeftTrigger;
        
        private static SteamVR_Action_Boolean p_default_RightTrigger;
        
        private static SteamVR_Action_Pose p_default_LeftHandPose;
        
        private static SteamVR_Action_Pose p_default_RightHandPose;
        
        private static SteamVR_Action_Vector2 p_default_LeftThumbStick;
        
        private static SteamVR_Action_Vector2 p_default_RightThumbStick;
        
        private static SteamVR_Action_Boolean p_default_B_Left;
        
        private static SteamVR_Action_Boolean p_default_A_Left;
        
        private static SteamVR_Action_Boolean p_default_B_Right;
        
        private static SteamVR_Action_Boolean p_default_A_Right;
        
        private static SteamVR_Action_Boolean p_default_LeftStart;
        
        private static SteamVR_Action_Boolean p_default_LeftThumbStickPress;
        
        private static SteamVR_Action_Boolean p_default_RightThumbStickPress;
        
        private static SteamVR_Action_Vibration p_default_Haptic;
        
        private static SteamVR_Action_Vector2 p_platformer_Move;
        
        private static SteamVR_Action_Boolean p_platformer_Jump;
        
        private static SteamVR_Action_Vector2 p_buggy_Steering;
        
        private static SteamVR_Action_Single p_buggy_Throttle;
        
        private static SteamVR_Action_Boolean p_buggy_Brake;
        
        private static SteamVR_Action_Boolean p_buggy_Reset;
        
        private static SteamVR_Action_Pose p_mixedreality_ExternalCamera;
        
        public static SteamVR_Action_Skeleton default_SkeletonLeftHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonLeftHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Skeleton default_SkeletonRightHand
        {
            get
            {
                return SteamVR_Actions.p_default_SkeletonRightHand.GetCopy<SteamVR_Action_Skeleton>();
            }
        }
        
        public static SteamVR_Action_Boolean default_LeftGrab
        {
            get
            {
                return SteamVR_Actions.p_default_LeftGrab.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_RightGrab
        {
            get
            {
                return SteamVR_Actions.p_default_RightGrab.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_LeftTrigger
        {
            get
            {
                return SteamVR_Actions.p_default_LeftTrigger.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_RightTrigger
        {
            get
            {
                return SteamVR_Actions.p_default_RightTrigger.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose default_LeftHandPose
        {
            get
            {
                return SteamVR_Actions.p_default_LeftHandPose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Pose default_RightHandPose
        {
            get
            {
                return SteamVR_Actions.p_default_RightHandPose.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        public static SteamVR_Action_Vector2 default_LeftThumbStick
        {
            get
            {
                return SteamVR_Actions.p_default_LeftThumbStick.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Vector2 default_RightThumbStick
        {
            get
            {
                return SteamVR_Actions.p_default_RightThumbStick.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean default_B_Left
        {
            get
            {
                return SteamVR_Actions.p_default_B_Left.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_A_Left
        {
            get
            {
                return SteamVR_Actions.p_default_A_Left.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_B_Right
        {
            get
            {
                return SteamVR_Actions.p_default_B_Right.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_A_Right
        {
            get
            {
                return SteamVR_Actions.p_default_A_Right.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_LeftStart
        {
            get
            {
                return SteamVR_Actions.p_default_LeftStart.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_LeftThumbStickPress
        {
            get
            {
                return SteamVR_Actions.p_default_LeftThumbStickPress.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean default_RightThumbStickPress
        {
            get
            {
                return SteamVR_Actions.p_default_RightThumbStickPress.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vibration default_Haptic
        {
            get
            {
                return SteamVR_Actions.p_default_Haptic.GetCopy<SteamVR_Action_Vibration>();
            }
        }
        
        public static SteamVR_Action_Vector2 platformer_Move
        {
            get
            {
                return SteamVR_Actions.p_platformer_Move.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Boolean platformer_Jump
        {
            get
            {
                return SteamVR_Actions.p_platformer_Jump.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Vector2 buggy_Steering
        {
            get
            {
                return SteamVR_Actions.p_buggy_Steering.GetCopy<SteamVR_Action_Vector2>();
            }
        }
        
        public static SteamVR_Action_Single buggy_Throttle
        {
            get
            {
                return SteamVR_Actions.p_buggy_Throttle.GetCopy<SteamVR_Action_Single>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Brake
        {
            get
            {
                return SteamVR_Actions.p_buggy_Brake.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Boolean buggy_Reset
        {
            get
            {
                return SteamVR_Actions.p_buggy_Reset.GetCopy<SteamVR_Action_Boolean>();
            }
        }
        
        public static SteamVR_Action_Pose mixedreality_ExternalCamera
        {
            get
            {
                return SteamVR_Actions.p_mixedreality_ExternalCamera.GetCopy<SteamVR_Action_Pose>();
            }
        }
        
        private static void InitializeActionArrays()
        {
            Valve.VR.SteamVR_Input.actions = new Valve.VR.SteamVR_Action[] {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_LeftGrab,
                    SteamVR_Actions.default_RightGrab,
                    SteamVR_Actions.default_LeftTrigger,
                    SteamVR_Actions.default_RightTrigger,
                    SteamVR_Actions.default_LeftHandPose,
                    SteamVR_Actions.default_RightHandPose,
                    SteamVR_Actions.default_LeftThumbStick,
                    SteamVR_Actions.default_RightThumbStick,
                    SteamVR_Actions.default_B_Left,
                    SteamVR_Actions.default_A_Left,
                    SteamVR_Actions.default_B_Right,
                    SteamVR_Actions.default_A_Right,
                    SteamVR_Actions.default_LeftStart,
                    SteamVR_Actions.default_LeftThumbStickPress,
                    SteamVR_Actions.default_RightThumbStickPress,
                    SteamVR_Actions.default_Haptic,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand,
                    SteamVR_Actions.default_LeftGrab,
                    SteamVR_Actions.default_RightGrab,
                    SteamVR_Actions.default_LeftTrigger,
                    SteamVR_Actions.default_RightTrigger,
                    SteamVR_Actions.default_LeftHandPose,
                    SteamVR_Actions.default_RightHandPose,
                    SteamVR_Actions.default_LeftThumbStick,
                    SteamVR_Actions.default_RightThumbStick,
                    SteamVR_Actions.default_B_Left,
                    SteamVR_Actions.default_A_Left,
                    SteamVR_Actions.default_B_Right,
                    SteamVR_Actions.default_A_Right,
                    SteamVR_Actions.default_LeftStart,
                    SteamVR_Actions.default_LeftThumbStickPress,
                    SteamVR_Actions.default_RightThumbStickPress,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsOut = new Valve.VR.ISteamVR_Action_Out[] {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsVibration = new Valve.VR.SteamVR_Action_Vibration[] {
                    SteamVR_Actions.default_Haptic};
            Valve.VR.SteamVR_Input.actionsPose = new Valve.VR.SteamVR_Action_Pose[] {
                    SteamVR_Actions.default_LeftHandPose,
                    SteamVR_Actions.default_RightHandPose,
                    SteamVR_Actions.mixedreality_ExternalCamera};
            Valve.VR.SteamVR_Input.actionsBoolean = new Valve.VR.SteamVR_Action_Boolean[] {
                    SteamVR_Actions.default_LeftGrab,
                    SteamVR_Actions.default_RightGrab,
                    SteamVR_Actions.default_LeftTrigger,
                    SteamVR_Actions.default_RightTrigger,
                    SteamVR_Actions.default_B_Left,
                    SteamVR_Actions.default_A_Left,
                    SteamVR_Actions.default_B_Right,
                    SteamVR_Actions.default_A_Right,
                    SteamVR_Actions.default_LeftStart,
                    SteamVR_Actions.default_LeftThumbStickPress,
                    SteamVR_Actions.default_RightThumbStickPress,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset};
            Valve.VR.SteamVR_Input.actionsSingle = new Valve.VR.SteamVR_Action_Single[] {
                    SteamVR_Actions.buggy_Throttle};
            Valve.VR.SteamVR_Input.actionsVector2 = new Valve.VR.SteamVR_Action_Vector2[] {
                    SteamVR_Actions.default_LeftThumbStick,
                    SteamVR_Actions.default_RightThumbStick,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.buggy_Steering};
            Valve.VR.SteamVR_Input.actionsVector3 = new Valve.VR.SteamVR_Action_Vector3[0];
            Valve.VR.SteamVR_Input.actionsSkeleton = new Valve.VR.SteamVR_Action_Skeleton[] {
                    SteamVR_Actions.default_SkeletonLeftHand,
                    SteamVR_Actions.default_SkeletonRightHand};
            Valve.VR.SteamVR_Input.actionsNonPoseNonSkeletonIn = new Valve.VR.ISteamVR_Action_In[] {
                    SteamVR_Actions.default_LeftGrab,
                    SteamVR_Actions.default_RightGrab,
                    SteamVR_Actions.default_LeftTrigger,
                    SteamVR_Actions.default_RightTrigger,
                    SteamVR_Actions.default_LeftThumbStick,
                    SteamVR_Actions.default_RightThumbStick,
                    SteamVR_Actions.default_B_Left,
                    SteamVR_Actions.default_A_Left,
                    SteamVR_Actions.default_B_Right,
                    SteamVR_Actions.default_A_Right,
                    SteamVR_Actions.default_LeftStart,
                    SteamVR_Actions.default_LeftThumbStickPress,
                    SteamVR_Actions.default_RightThumbStickPress,
                    SteamVR_Actions.platformer_Move,
                    SteamVR_Actions.platformer_Jump,
                    SteamVR_Actions.buggy_Steering,
                    SteamVR_Actions.buggy_Throttle,
                    SteamVR_Actions.buggy_Brake,
                    SteamVR_Actions.buggy_Reset};
        }
        
        private static void PreInitActions()
        {
            SteamVR_Actions.p_default_SkeletonLeftHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/default/in/SkeletonLeftHand")));
            SteamVR_Actions.p_default_SkeletonRightHand = ((SteamVR_Action_Skeleton)(SteamVR_Action.Create<SteamVR_Action_Skeleton>("/actions/default/in/SkeletonRightHand")));
            SteamVR_Actions.p_default_LeftGrab = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/LeftGrab")));
            SteamVR_Actions.p_default_RightGrab = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/RightGrab")));
            SteamVR_Actions.p_default_LeftTrigger = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/LeftTrigger")));
            SteamVR_Actions.p_default_RightTrigger = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/RightTrigger")));
            SteamVR_Actions.p_default_LeftHandPose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/default/in/LeftHandPose")));
            SteamVR_Actions.p_default_RightHandPose = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/default/in/RightHandPose")));
            SteamVR_Actions.p_default_LeftThumbStick = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/default/in/LeftThumbStick")));
            SteamVR_Actions.p_default_RightThumbStick = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/default/in/RightThumbStick")));
            SteamVR_Actions.p_default_B_Left = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/B Left")));
            SteamVR_Actions.p_default_A_Left = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/A Left")));
            SteamVR_Actions.p_default_B_Right = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/B Right")));
            SteamVR_Actions.p_default_A_Right = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/A Right")));
            SteamVR_Actions.p_default_LeftStart = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/LeftStart")));
            SteamVR_Actions.p_default_LeftThumbStickPress = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/LeftThumbStickPress")));
            SteamVR_Actions.p_default_RightThumbStickPress = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/default/in/RightThumbStickPress")));
            SteamVR_Actions.p_default_Haptic = ((SteamVR_Action_Vibration)(SteamVR_Action.Create<SteamVR_Action_Vibration>("/actions/default/out/Haptic")));
            SteamVR_Actions.p_platformer_Move = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/platformer/in/Move")));
            SteamVR_Actions.p_platformer_Jump = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/platformer/in/Jump")));
            SteamVR_Actions.p_buggy_Steering = ((SteamVR_Action_Vector2)(SteamVR_Action.Create<SteamVR_Action_Vector2>("/actions/buggy/in/Steering")));
            SteamVR_Actions.p_buggy_Throttle = ((SteamVR_Action_Single)(SteamVR_Action.Create<SteamVR_Action_Single>("/actions/buggy/in/Throttle")));
            SteamVR_Actions.p_buggy_Brake = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/buggy/in/Brake")));
            SteamVR_Actions.p_buggy_Reset = ((SteamVR_Action_Boolean)(SteamVR_Action.Create<SteamVR_Action_Boolean>("/actions/buggy/in/Reset")));
            SteamVR_Actions.p_mixedreality_ExternalCamera = ((SteamVR_Action_Pose)(SteamVR_Action.Create<SteamVR_Action_Pose>("/actions/mixedreality/in/ExternalCamera")));
        }
    }
}
